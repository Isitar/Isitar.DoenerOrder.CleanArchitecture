// <auto-generated />
using System;
using Isitar.DoenerOrder.CleanArchitecture.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Isitar.DoenerOrder.CleanArchitecture.Persistence.Migrations
{
    [DbContext(typeof(DoenerDbContext))]
    [Migration("20200629211510_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.AuditTrailEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BulkOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderLineId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("When")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("BulkOrderId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderLineId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrailEntry");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.BulkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant?>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Instant>("Deadline")
                        .HasColumnType("timestamp");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("BulkOrders");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AdditionalPrice")
                        .HasColumnType("numeric");

                    b.Property<Instant?>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BulkOrderId")
                        .HasColumnType("uuid");

                    b.Property<Instant?>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BulkOrderId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.OrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant?>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IngredientId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric");

                    b.Property<Instant?>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant?>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Acronym")
                        .HasColumnType("text");

                    b.Property<Instant?>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.AuditTrailEntry", b =>
                {
                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.BulkOrder", null)
                        .WithMany("AuditTrailEntries")
                        .HasForeignKey("BulkOrderId");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Ingredient", null)
                        .WithMany("AuditTrailEntries")
                        .HasForeignKey("IngredientId");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Order", null)
                        .WithMany("AuditTrailEntries")
                        .HasForeignKey("OrderId");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.OrderLine", null)
                        .WithMany("AuditTrailEntries")
                        .HasForeignKey("OrderLineId");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Product", null)
                        .WithMany("AuditTrailEntries")
                        .HasForeignKey("ProductId");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Supplier", null)
                        .WithMany("AuditTrailEntries")
                        .HasForeignKey("SupplierId");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", null)
                        .WithMany("AuditTrailEntries")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.BulkOrder", b =>
                {
                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Ingredient", b =>
                {
                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Product", "Product")
                        .WithMany("Ingredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Order", b =>
                {
                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.BulkOrder", "BulkOrder")
                        .WithMany("Orders")
                        .HasForeignKey("BulkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.OrderLine", b =>
                {
                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Product", b =>
                {
                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.Supplier", b =>
                {
                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", b =>
                {
                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Isitar.DoenerOrder.CleanArchitecture.Domain.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });
#pragma warning restore 612, 618
        }
    }
}
